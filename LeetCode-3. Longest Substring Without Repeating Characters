Question-

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Solution-

class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        HashMap <Character , Integer > hm  = new HashMap<>();
        int maxlen =0;
        int i = -1;
        int j = -1;
        while(true) {
            boolean f1 = false;
            boolean f2 = false;
            // acquiring
            while (i < s.length() - 1) {
                f1 = true;
                i++;

                char ch = s.charAt(i);
                hm.put(ch, hm.getOrDefault(ch, 0) + 1);

                if (hm.get(ch) == 2) {
                    break;
                } else {
                    int len = i - j;
                    if (len > maxlen) {
                        maxlen = len;
                    }
                }
            }
            // releasing
            while (j < i) {
                j++;
                f2 = true;
                char ch = s.charAt(j);
                hm.put(ch, hm.get(ch) - 1);

                if (hm.get(ch) == 1) break;
            }
            if (!f1 && !f2) break;
        }
        return maxlen;
    }
}
