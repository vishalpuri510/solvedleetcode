Question-

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


Solution---------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        boolean[] freq = new boolean[nums.length];
        int n = nums.length;
        List<List<Integer>> al = new ArrayList<>();
        helper(freq,n,al,nums,new ArrayList<>());
        return al;
    }
    
    public void helper(boolean[] freq,int n,List<List<Integer>>al,int[] nums,ArrayList<Integer> li){
        if(li.size()==n){
            if(!al.contains(li)){
                al.add(new ArrayList<>(li));
            }
        }
        
        for(int i=0;i<n;i++){
            if(!freq[i]){
                freq[i] = true;
                li.add(nums[i]);
                helper(freq,n,al,nums,li);
                freq[i] = false;
                li.remove(li.size()-1);
            }
        }
    }
}
