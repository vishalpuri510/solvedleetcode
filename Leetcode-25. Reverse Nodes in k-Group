Question-Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k
then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.


Solution-
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null) return null;
        
        ListNode prev = null;
        ListNode next = null;
        ListNode current = head;
        int count = 0;
        
        while(current!=null && count<k){
            next = current.next;
            current.next = prev;
            prev = current;
            current= next;
            count++;
        }
        
        if(count!=k){  // when we are still left with the elements less than k
         return reverseKGroup(prev,count);
         }
        
        if(next!=null){
            head.next = reverseKGroup(next,k);
        }
     return prev;   
    }
}
