Question-You are given a string s and an integer k, a k duplicate removal consists of choosing k adjacent and equal letters from s and removing them, causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make k duplicate removals on s until we no longer can.

Return the final string after all such duplicate removals have been made. It is guaranteed that the answer is unique.

 

Example 1:

Input: s = "abcd", k = 2
Output: "abcd"
Explanation: There's nothing to delete.
Example 2:

Input: s = "deeedbbcccbdaa", k = 3
Output: "aa"
Explanation: 
First delete "eee" and "ccc", get "ddbbbdaa"
Then delete "bbb", get "dddaa"
Finally delete "ddd", get "aa"

Solution-

class Solution {
    public String removeDuplicates(String s, int k) {
        char[] arr = s.toCharArray();
        int n = arr.length;
        int[] count = new int[n];
        int top = -1;
        for (int i = 0; i < n; i++) {
            if (top == -1) {
                ++top;
                arr[top] = arr[i];
                count[top] = 1;
            } else {
                if (top >= 0 && arr[top] == arr[i] && (count[top] + 1) == k) {
                    top -= k - 1;
                } else {
                    top++;
                    count[top] = (arr[top - 1] == arr[i] ? (count[top - 1] + 1) : 1);
                    arr[top] = arr[i];
                }
            }
        }
        return new String(arr, 0, top + 1);
    }
}
